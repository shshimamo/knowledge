package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"strconv"

	"github.com/shshimamo/knowledge/main/graph/generated"
	"github.com/shshimamo/knowledge/main/graph/model"
	"github.com/shshimamo/knowledge/main/middlewares"
	m "github.com/shshimamo/knowledge/main/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	return r.AllService.CreateUser(ctx, &input)
}

// CreateKnowledge is the resolver for the createKnowledge field.
func (r *mutationResolver) CreateKnowledge(ctx context.Context, input *model.CreateKnowledgeInput) (*model.Knowledge, error) {
	return r.AllService.CreateKnowledge(ctx, input)
}

// UpdateKnowledge is the resolver for the updateKnowledge field.
func (r *mutationResolver) UpdateKnowledge(ctx context.Context, id string, input *model.UpdateKnowledgeInput) (*model.Knowledge, error) {
	i, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.AllService.UpdateKnowledge(ctx, i, input)
}

// DeleteKnowledge is the resolver for the deleteKnowledge field.
func (r *mutationResolver) DeleteKnowledge(ctx context.Context, id string) (*model.DeleteKnowledgeResult, error) {
	i, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.AllService.DeleteKnowledge(ctx, i)
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*model.CurrentUser, error) {
	user, ok := middlewares.GetCurrentUser(ctx)

	if !ok {
		return nil, errors.New("not authenticated")
	}

	return m.MapUserModelToGqlCurrent(user), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	i, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.AllService.GetUser(ctx, i)
}

// Knowledge is the resolver for the knowledge field.
func (r *queryResolver) Knowledge(ctx context.Context, id string) (*model.Knowledge, error) {
	i, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.AllService.GetKnowledge(ctx, i)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
