// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testKnowledges(t *testing.T) {
	t.Parallel()

	query := Knowledges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testKnowledgesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKnowledgesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Knowledges().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKnowledgesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KnowledgeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKnowledgesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := KnowledgeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Knowledge exists: %s", err)
	}
	if !e {
		t.Errorf("Expected KnowledgeExists to return true, but got false.")
	}
}

func testKnowledgesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	knowledgeFound, err := FindKnowledge(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if knowledgeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testKnowledgesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Knowledges().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testKnowledgesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Knowledges().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testKnowledgesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	knowledgeOne := &Knowledge{}
	knowledgeTwo := &Knowledge{}
	if err = randomize.Struct(seed, knowledgeOne, knowledgeDBTypes, false, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}
	if err = randomize.Struct(seed, knowledgeTwo, knowledgeDBTypes, false, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = knowledgeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = knowledgeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Knowledges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testKnowledgesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	knowledgeOne := &Knowledge{}
	knowledgeTwo := &Knowledge{}
	if err = randomize.Struct(seed, knowledgeOne, knowledgeDBTypes, false, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}
	if err = randomize.Struct(seed, knowledgeTwo, knowledgeDBTypes, false, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = knowledgeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = knowledgeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func knowledgeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func knowledgeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func knowledgeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func knowledgeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func knowledgeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func knowledgeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func knowledgeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func knowledgeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func knowledgeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Knowledge) error {
	*o = Knowledge{}
	return nil
}

func testKnowledgesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Knowledge{}
	o := &Knowledge{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, knowledgeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Knowledge object: %s", err)
	}

	AddKnowledgeHook(boil.BeforeInsertHook, knowledgeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	knowledgeBeforeInsertHooks = []KnowledgeHook{}

	AddKnowledgeHook(boil.AfterInsertHook, knowledgeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	knowledgeAfterInsertHooks = []KnowledgeHook{}

	AddKnowledgeHook(boil.AfterSelectHook, knowledgeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	knowledgeAfterSelectHooks = []KnowledgeHook{}

	AddKnowledgeHook(boil.BeforeUpdateHook, knowledgeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	knowledgeBeforeUpdateHooks = []KnowledgeHook{}

	AddKnowledgeHook(boil.AfterUpdateHook, knowledgeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	knowledgeAfterUpdateHooks = []KnowledgeHook{}

	AddKnowledgeHook(boil.BeforeDeleteHook, knowledgeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	knowledgeBeforeDeleteHooks = []KnowledgeHook{}

	AddKnowledgeHook(boil.AfterDeleteHook, knowledgeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	knowledgeAfterDeleteHooks = []KnowledgeHook{}

	AddKnowledgeHook(boil.BeforeUpsertHook, knowledgeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	knowledgeBeforeUpsertHooks = []KnowledgeHook{}

	AddKnowledgeHook(boil.AfterUpsertHook, knowledgeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	knowledgeAfterUpsertHooks = []KnowledgeHook{}
}

func testKnowledgesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKnowledgesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(knowledgePrimaryKeyColumns, knowledgeColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKnowledgeToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Knowledge
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, knowledgeDBTypes, false, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := KnowledgeSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Knowledge)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testKnowledgeToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Knowledge
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, knowledgeDBTypes, false, strmangle.SetComplement(knowledgePrimaryKeyColumns, knowledgeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Knowledges[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testKnowledgesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKnowledgesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KnowledgeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKnowledgesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Knowledges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	knowledgeDBTypes = map[string]string{`ID`: `bigint`, `UserID`: `bigint`, `Title`: `character varying`, `Text`: `text`, `IsPublic`: `boolean`, `PublishedAt`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                = bytes.MinRead
)

func testKnowledgesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(knowledgePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(knowledgeAllColumns) == len(knowledgePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testKnowledgesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(knowledgeAllColumns) == len(knowledgePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Knowledge{}
	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, knowledgeDBTypes, true, knowledgePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(knowledgeAllColumns, knowledgePrimaryKeyColumns) {
		fields = knowledgeAllColumns
	} else {
		fields = strmangle.SetComplement(
			knowledgeAllColumns,
			knowledgePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := KnowledgeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testKnowledgesUpsert(t *testing.T) {
	t.Parallel()

	if len(knowledgeAllColumns) == len(knowledgePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Knowledge{}
	if err = randomize.Struct(seed, &o, knowledgeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Knowledge: %s", err)
	}

	count, err := Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, knowledgeDBTypes, false, knowledgePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Knowledge struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Knowledge: %s", err)
	}

	count, err = Knowledges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
